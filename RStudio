#Melissa, Aidan RStudio Data Vizualization class

# Final Computer Science Project - Hot in Here (R version)
# Author: Converted by ChatGPT
# Date: 2025-04-27

# Load required libraries
library(tidyverse)
library(sf)           # for shapefile operations
library(ggplot2)      # for plotting
library(maps)         # for US state map data
library(RColorBrewer) # for color palettes

# 1. Read and preprocess the data
# Assume `Max_Min.csv` is whitespace-delimited with no header
raw <- read_table2("Max_Min.csv", col_names = FALSE)
# Assign columns: Regions + 12 months
colnames(raw) <- c("Regions", month.name)

# Filter out any 2024 entries, then split 'Regions' into fields
df <- raw %>%
  filter(!str_detect(Regions, "2024$")) %>%
  mutate(
    StateCode   = substr(Regions, 1, 3),
    ElementCode = substr(Regions, 4, 6),
    Year        = as.integer(substr(Regions, 7, 10)),
    # map numeric codes to state names (lowercase for map_data)
    State       = recode(StateCode,
      `001`="alabama",  `002`="arizona", `003`="arkansas",
      `004`="california",`005`="colorado", `006`="connecticut",
      `007`="delaware",  `008`="florida",   `009`="georgia",
      `010`="idaho",     `011`="illinois",  `012`="indiana",
      `013`="iowa",      `014`="kansas",    `015`="kentucky",
      `016`="louisiana", `017`="maine",     `018`="maryland",
      `019`="massachusetts`, `020`="michigan", `021`="minnesota",
      `022`="mississippi`,`023`="missouri",  `024`="montana",
      `025`="nebraska",  `026`="nevada",    `027`="new hampshire",
      `028`="new jersey","029`="new mexico`, `030`="new york",
      `031`="north carolina","032`="north dakota`,
      `033`="ohio",      `034`="oklahoma",  `035`="oregon",
      `036`="pennsylvania`, `037`="rhode island`,`038`="south carolina",
      `039`="south dakota","040`="tennessee`, `041`="texas",
      `042`="utah",      `043`="vermont",    `044`="virginia",
      `045`="washington",`046`="west virginia`,`047`="wisconsin",
      `048`="wyoming",   `050`="alaska"
    ),
    Element = recode(ElementCode, `027`="Max", `028`="Min")
  ) %>%
  # compute per-row extreme across months
  rowwise() %>%
  mutate(
    temperature_average = if_else(
      Element == "Max",
      do.call(pmax, c(across(all_of(month.name)), na.rm = TRUE)),
      do.call(pmin, c(across(all_of(month.name)), na.rm = TRUE))
    )
  ) %>%
  ungroup()

# 2. Interactive state selection on a US map
# Plot base map
map("state", fill = TRUE, col = "lightgray", bg = "white", lwd = 0.5)
# Let the user click once
cat("Click on the map to choose a state...\n")
pt <- locator(1)
# Identify state at clicked lon/lat
chosen_region <- map.where("state", pt$x, pt$y)
chosen_state  <- str_to_title(str_replace(chosen_region, ":.*$", ""))
cat("You selected:", chosen_state, "\n")

# 3. Plot temperature trends for that state
plot_state <- function(data, state_name, degree = 5) {
  sub <- data %>% filter(State == str_to_lower(state_name))
  max_df <- sub %>% filter(Element == "Max")
  min_df <- sub %>% filter(Element == "Min")

  # Fit polynomial regressions
  mod_max <- lm(temperature_average ~ poly(Year, degree), data = max_df)
  mod_min <- lm(temperature_average ~ poly(Year, degree), data = min_df)

  # Create a smooth year grid
  yrs <- seq(min(sub$Year), max(sub$Year), length.out = 500)
  pred_max <- predict(mod_max, newdata = data.frame(Year = yrs))
  pred_min <- predict(mod_min, newdata = data.frame(Year = yrs))

  # Prepare data for ggplot
  plot_df <- tibble(
    Year = rep(yrs, 2),
    Temperature = c(pred_max, pred_min),
    Element = rep(c("Max Fit", "Min Fit"), each = length(yrs))
  )

  ggplot() +
    geom_point(data = max_df, aes(Year, temperature_average), alpha = 0.6, color = "red") +
    geom_point(data = min_df, aes(Year, temperature_average), alpha = 0.6, color = "blue") +
    geom_line(data = plot_df %>% filter(Element == "Max Fit"), aes(Year, Temperature), size = 1, color = "darkred") +
    geom_line(data = plot_df %>% filter(Element == "Min Fit"), aes(Year, Temperature), size = 1, color = "darkblue") +
    labs(
      title = paste("Temperature Trends in", state_name),
      x = "Year", y = "Temperature (ºF)",
      color = "Element"
    ) +
    theme_minimal()
}

print(plot_state(df, chosen_state))

# 4. Ask for two years to generate US temperature maps
old_year <- as.integer(readline("Enter the oldest year to compare: "))
new_year <- as.integer(readline("Enter the newest year to compare: "))

# Prepare map data
us_map <- map_data("state")
limits_min <- c(-10, 30)
limits_max <- c(78, 110)

# Function to draw one map
plot_map_year <- function(year, element, limits) {
  subset <- df %>%
    filter(Year == year, Element == element) %>%
    mutate(region = State)

  mdf <- us_map %>%
    left_join(subset, by = c("region" = "region"))

  ggplot(mdf, aes(long, lat, group = group, fill = temperature_average)) +
    geom_polygon(color = "white") +
    coord_fixed(1.3) +
    scale_fill_gradientn(
      colors = brewer.pal(9, ifelse(element == "Min", "Blues", "Reds")),
      limits = limits,
      na.value = "grey90"
    ) +
    labs(
      title = paste(element, "Temperature Map", year),
      fill = "Temp (ºF)"
    ) +
    theme_void()
}

# Display 4 maps in a 2x2 grid
library(patchwork)
(
  plot_map_year(old_year, "Min", limits_min) + plot_map_year(new_year, "Min", limits_min)
) / (
  plot_map_year(old_year, "Max", limits_max) + plot_map_year(new_year, "Max", limits_max)
)
